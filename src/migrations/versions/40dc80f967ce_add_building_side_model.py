"""Add building_side model

Revision ID: 40dc80f967ce
Revises: a151a6574162
Create Date: 2025-06-21 14:24:08.603059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '40dc80f967ce'
down_revision: Union[str, None] = 'a151a6574162'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_token_blacklist_token'), table_name='token_blacklist')
    op.drop_table('token_blacklist')
    op.add_column('building_level', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('building_level', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_level', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_level', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_building_level_is_deleted'), 'building_level', ['is_deleted'], unique=False)
    op.create_unique_constraint(None, 'building_level', ['id'])
    op.add_column('building_side', sa.Column('building_id', sa.Integer(), nullable=False))
    op.add_column('building_side', sa.Column('orientation_degrees', sa.Float(), nullable=False))
    op.add_column('building_side', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('building_side', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_side', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_side', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_building_side_building_id'), 'building_side', ['building_id'], unique=False)
    op.create_index(op.f('ix_building_side_is_deleted'), 'building_side', ['is_deleted'], unique=False)
    op.create_unique_constraint(None, 'building_side', ['id'])
    op.create_foreign_key(None, 'building_side', 'buildings', ['building_id'], ['id'])
    op.add_column('building_type', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('building_type', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_type', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('building_type', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_building_type_is_deleted'), 'building_type', ['is_deleted'], unique=False)
    op.add_column('category', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('category', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('category', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('category', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_category_is_deleted'), 'category', ['is_deleted'], unique=False)
    op.add_column('sub_category', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('sub_category', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('sub_category', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('sub_category', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_sub_category_is_deleted'), 'sub_category', ['is_deleted'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sub_category_is_deleted'), table_name='sub_category')
    op.drop_column('sub_category', 'is_deleted')
    op.drop_column('sub_category', 'deleted_at')
    op.drop_column('sub_category', 'updated_at')
    op.drop_column('sub_category', 'created_at')
    op.drop_index(op.f('ix_category_is_deleted'), table_name='category')
    op.drop_column('category', 'is_deleted')
    op.drop_column('category', 'deleted_at')
    op.drop_column('category', 'updated_at')
    op.drop_column('category', 'created_at')
    op.drop_index(op.f('ix_building_type_is_deleted'), table_name='building_type')
    op.drop_column('building_type', 'is_deleted')
    op.drop_column('building_type', 'deleted_at')
    op.drop_column('building_type', 'updated_at')
    op.drop_column('building_type', 'created_at')
    op.drop_constraint(None, 'building_side', type_='foreignkey')
    op.drop_constraint(None, 'building_side', type_='unique')
    op.drop_index(op.f('ix_building_side_is_deleted'), table_name='building_side')
    op.drop_index(op.f('ix_building_side_building_id'), table_name='building_side')
    op.drop_column('building_side', 'is_deleted')
    op.drop_column('building_side', 'deleted_at')
    op.drop_column('building_side', 'updated_at')
    op.drop_column('building_side', 'created_at')
    op.drop_column('building_side', 'orientation_degrees')
    op.drop_column('building_side', 'building_id')
    op.drop_constraint(None, 'building_level', type_='unique')
    op.drop_index(op.f('ix_building_level_is_deleted'), table_name='building_level')
    op.drop_column('building_level', 'is_deleted')
    op.drop_column('building_level', 'deleted_at')
    op.drop_column('building_level', 'updated_at')
    op.drop_column('building_level', 'created_at')
    op.create_table('token_blacklist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('token_blacklist_pkey'))
    )
    op.create_index(op.f('ix_token_blacklist_token'), 'token_blacklist', ['token'], unique=True)
    # ### end Alembic commands ###
