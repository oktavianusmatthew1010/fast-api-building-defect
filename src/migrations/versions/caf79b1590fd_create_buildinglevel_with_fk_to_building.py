"""Create BuildingLevel with FK to Building

Revision ID: caf79b1590fd
Revises: fc3354e59146
Create Date: 2025-07-25 14:11:34.865236

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'caf79b1590fd'
down_revision: Union[str, None] = 'fc3354e59146'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_token_blacklist_token'), table_name='token_blacklist')
    op.drop_table('token_blacklist')
    op.add_column('building_level', sa.Column('name', sa.String(length=50), nullable=False))
    op.create_unique_constraint(None, 'building_level', ['id'])
    op.drop_column('building_level', 'level_number')
    op.alter_column('buildings', 'project_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('ix_buildings_project_id'), table_name='buildings')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_buildings_project_id'), 'buildings', ['project_id'], unique=False)
    op.alter_column('buildings', 'project_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('building_level', sa.Column('level_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'building_level', type_='unique')
    op.drop_column('building_level', 'name')
    op.create_table('token_blacklist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('token_blacklist_pkey'))
    )
    op.create_index(op.f('ix_token_blacklist_token'), 'token_blacklist', ['token'], unique=True)
    # ### end Alembic commands ###
